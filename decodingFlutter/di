구현 방식:

    생성자 주입: 가장 기본적인 방식으로, 위젯이나 클래스의 생성자를 통해 의존성을 직접 전달합니다.

    InheritedWidget: Flutter의 고유한 위젯 트리 특성을 활용하여 상위 위젯의 데이터를 하위 위젯이 접근하도록 하는 방식입니다.

    DI 라이브러리 사용 (권장): 대규모 프로젝트에서 효율적인 의존성 관리를 위해 주로 사용됩니다.

        provider: Flutter에서 가장 널리 쓰이는 상태 관리 및 DI 라이브러리로, 위젯 트리를 통해 데이터를 쉽게 공유하고 선택적으로 UI를 재빌드할 수 있게 합니다.

        get_it: 가볍고 빠른 서비스 로케이터 기반의 DI 라이브러리로, 테스트 용이성이 뛰어납니다.

        injectable: get_it 위에 구축된 코드 생성 기반 라이브러리로, 복잡한 의존성 그래프를 자동으로 처리하여 대규모 프로젝트에 적합합니다.

flutter_hooks 패키지를 통해 StatefulWidget 없이 위젯 내부의 지역적인 상태를 함수 형태로 간결하게 관리할 수 있게 해줍니다. 보일러플레이트 코드를 줄이고 로직의 재사용성을 높이는 데 유용합니다.
          (useState)  

ref:: curogom.dev  
